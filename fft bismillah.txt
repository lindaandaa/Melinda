from datetime import datetime
import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import pandas as pd
import serial
from collections import deque
from scipy.fft import fft
from scipy.signal import butter, lfilter
from PIL import ImageGrab

cutoff_frequency = 10.0  # Frekuensi cutoff filter dalam Hz
sampling_rate = 100.0  

class EGM_GUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Monitoring Sinyal Elektromiografi pada Otot Manusia")
        self.root.geometry("800x600")
        
        # Setup serial communication with Arduino   
        self.serial_port = serial.Serial('COM4', 9600)  # Sesuaikan dengan port Arduino Anda
        self.navbar = tk.Menu(root)
        self.root.config(menu=self.navbar)

        # Menu "File"
        self.file_menu = tk.Menu(self.navbar, tearoff=0)
        self.navbar.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="Open Data", command=self.open_csv_file)  # Menghubungkan fungsi open_csv_file
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Exit", command=root.destroy)
        
        # Menu "Options"
        self.options_menu = tk.Menu(self.navbar, tearoff=0)
        self.navbar.add_cascade(label="Options", menu=self.options_menu)
        self.options_menu.add_command(label="Start", command=self.start) 
        self.options_menu.add_separator()
        self.options_menu.add_command(label="Stop", command=self.stop)
        self.options_menu.add_separator()
        self.options_menu.add_command(label="Pause", command=self.toggle_pause)
        self.options_menu.add_separator()
        self.options_menu.add_command(label="Reset", command=self.reset)

        # Menu "Save"
        self.save_menu = tk.Menu(self.navbar, tearoff=0)
        self.navbar.add_cascade(label="Save", menu=self.save_menu)
        self.save_menu.add_command(label="Save Data", command=self.save_data)
        self.save_menu.add_command(label="Save Image", command=self.save_image)

        # Menu "Analysis"
        self.analysis_menu = tk.Menu(self.navbar, tearoff=0)
        self.navbar.add_cascade(label="Analysis", menu=self.analysis_menu)
        self.analysis_menu.add_command(label="Calculate FFT and Mean", command=self.calculate_fft_and_mean)

        # Footer Menu
        self.footer_frame = ttk.Frame(root)
        self.footer_frame.pack(side=tk.BOTTOM, fill=tk.X)
    
        self.result_label = ttk.Label(self.footer_frame, text="Mean FFT: N/A", anchor="e")
        self.result_label.pack(side=tk.BOTTOM, padx=550)

        self.status_label = ttk.Label(root, text="Status Kondisi: Tidak diketahui", anchor="w", font=("Helvetica", 9))
        self.status_label.pack(side=tk.BOTTOM, padx=300)

        # Create the plot
        self.fig, (self.ax1, self.ax2) = plt.subplots(1, 2, figsize=(12, 4))
        self.ax1.set_title('EGM Signal 1')
        self.ax1.set_xlabel('Time')
        self.ax1.set_ylabel('Tegangan')
        self.line1, = self.ax1.plot([], [], lw=2)

        # Create the figure and axes for the second plot
        self.ax2.set_title('FFT')
        self.ax2.set_xlabel('Frekuensi')
        self.ax2.set_ylabel('Amplitudo')
        self.line2, = self.ax2.plot([], [], lw=2)

        # Create the canvas for both plots
        self.canvas = FigureCanvasTkAgg(self.fig, master=root)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Initialize data deque for both plots
        self.data1 = deque(maxlen=1000)
        self.data2 = deque(maxlen=1000)

        self.animation_running = False  # Initialize the animation_running attribute
        self.paused = False  # Initialize the pause attribute
        
        # Untuk mengubah waktu penyimpanan
        self.save_interval_ms = 3 * 60 * 1000  # Save data every 3 minutes
        self.periodic_save()

    def animation(self):
        def update_plot():
            if not self.paused:  # Check if not paused
                # Read data from serial
                data = self.serial_port.readline().decode('ascii').strip()

                if data:
                    # Process data  
                    value = float(data)
                    self.data1.append(value)

                    b, a = butter(4, 0.1, 'low')
                    filter_sig = lfilter(b, a, self.data1)
                    self.data2.append(filter_sig[0])

                    self.line1.set_data(range(len(self.data1)), self.data1)
                    self.ax1.relim()
                    self.ax1.autoscale_view()
                    self.ax2.relim()
                    self.ax2.autoscale_view()
                    self.canvas.draw()
                    self.canvas.flush_events()
            if self.animation_running:  # Continue if animation is running
                # Call this function again after 100ms
                self.root.after(100, update_plot)
        
        # Call the update_plot function initially
        update_plot()

    def save_image(self):
        im = ImageGrab.grab()
        
        # Generate a unique filename using current timestamp
        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"screenshot_{now}.png"
        
        # Save the image
        im.save(filename)
        print(f"Screenshot saved as {filename}")

    def save_data(self):
        # Ensure the "record" directory exists
        os.makedirs("record", exist_ok=True)

        # Get the current timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Create the filename with the timestamp
        filename = f"record/data_{timestamp}.csv"

        # Combine data1 and data2 into a DataFrame
        if len(self.data1) == len(self.data2):
            df = pd.DataFrame({
                'Time': range(len(self.data1)),
                'EGM Signal 1': list(self.data1),
                'EGM Signal 2': list(self.data2)
            })

            # Save the DataFrame to a CSV file
            df.to_csv(filename, index=False)
            print(f"Data saved to {filename}")
        else:
            print("Error: Length of data1 and filtered_signal are not the same")

    def periodic_save(self):
        # Save data to CSV
        self.save_data()

        # Schedule the next save after the specified interval
        self.root.after(self.save_interval_ms, self.periodic_save)

    # Untuk membuka file yang sudah tersimpan   
    def open_csv_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if file_path:
            try:
                # Membaca file CSV
                df = pd.read_csv(file_path)
                # Menampilkan data sebagai grafik
                self.plot_excel_data(df)
                messagebox.showinfo("Success", "CSV file successfully opened")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read file\n{e}")
        #self.start() #Restart real-time data acquisition if desired

    def plot_excel_data(self, df):
        # Memperbarui plot dengan data dari file Excel atau CSV
        self.data1.clear()
        self.data2.clear()

        # Mengasumsikan bahwa data di kolom pertama adalah untuk plot pertama dan kolom kedua untuk plot kedua
        if 'EGM Signal 1' in df.columns and 'EGM Signal 2' in df.columns:
            self.data1.extend(df['EGM Signal 1'])
            self.data2.extend(df['EGM Signal 2'])
        else:
            messagebox.showerror("Error", "The Excel file does not contain the required columns")

        self.line1.set_data(range(len(self.data1)), self.data1)
        self.line2.set_data(range(len(self.data2)), self.data2)
        self.ax1.relim()
        self.ax1.autoscale_view()
        self.ax2.relim()
        self.ax2.autoscale_view()
        self.canvas.draw()
        self.canvas.flush_events()

    def calculate_fft_and_mean(self):
        if len(self.data1) > 0:
            # Convert deque to numpy array
            data_array = np.array(self.data1)

            # Perform FFT
            yf = fft(data_array)
            xf = np.fft.fftfreq(len(data_array), 1 / sampling_rate)

            # Calculate mean of the absolute values of FFT
            mean_fft = np.mean(np.abs(yf))

            # Find the frequency with the highest amplitude
            max_amp_index = np.argmax(np.abs(yf[:len(yf)//2]))
            max_freq = xf[max_amp_index]
            max_amp = np.abs(yf[max_amp_index])

            # Plot the frequency with the highest amplitude
            self.line2.set_data([max_freq], [max_amp])
            self.ax2.relim()
            self.ax2.autoscale_view()
            self.canvas.draw()
            self.canvas.flush_events()

            # Display the mean FFT value
            self.result_label.config(text=f"Mean FFT: {mean_fft:.2f}")

            # Update status based on mean FFT value
            if mean_fft > 234:
                status = "Kelelahan"
            else:
                status = "Tidak Kelelahan"
            self.status_label.config(text=f"Status Kondisi: {status}")

    def start(self):
        self.reset()  
        if not self.animation_running:
            self.animation_running = True
            self.animation()

    def stop(self):
        self.animation_running = False

    def toggle_pause(self):
        self.paused = not self.paused
        if self.paused:
            self.options_menu.entryconfig(3, label="Resume")
        else:
            self.options_menu.entryconfig(3, label="Pause")

    def reset(self):
        self.data1.clear()
        self.line1.set_data([], [])
        self.ax1.relim()
        self.ax1.autoscale_view()
        self.canvas.draw()
        self.canvas.flush_events()
        self.result_label.config(text="Mean FFT: N/A")
        self.status_label.config(text="Status Kondisi: Unknown")

    def on_closing(self):
        if self.serial_port:
            self.serial_port.close()
        self.root.destroy()

# Kemudian, dalam kode yang memanggil EGM_GUI:
if __name__ == "__main__":
    root = tk.Tk()
    app = EGM_GUI(root)
    app.animation()
    root.mainloop()
